# Generated by Django 2.1.1 on 2018-10-16 13:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.fields
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(db_index=True, max_length=11, unique=True)),
                ('avatar', models.FileField(blank=True, default='avatars/default.jpg', upload_to='avatars/', verbose_name='头像')),
                ('create_time', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 10 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=20, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('eid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('attach', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('type', models.IntegerField()),
                ('update_time', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Friends',
            fields=[
                ('fid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alias', models.CharField(max_length=20)),
                ('origin_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='origin_user_id', to=settings.AUTH_USER_MODEL)),
                ('target_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_user_id', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('gid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('picture', models.FileField(upload_to='groupPicture/')),
                ('description', models.CharField(blank=True, max_length=100)),
                ('update_at', models.DateTimeField(auto_now_add=True)),
                ('owner_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('mId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alias', models.CharField(max_length=20)),
                ('permission_type', models.IntegerField(default=0)),
                ('notify_level', models.IntegerField(default=0)),
                ('createAt', models.DateTimeField(auto_now_add=True)),
                ('upDateAt', models.DateTimeField(auto_now=True)),
                ('group_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='androidEdge.Group')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LinkComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('comment_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='lower_comment', to='androidEdge.LinkComment')),
            ],
        ),
        migrations.CreateModel(
            name='LinkComplete',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attach', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('type', models.IntegerField()),
                ('create_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LinkMember',
            fields=[
                ('mid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_up', models.BooleanField(default=False)),
                ('is_remind', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='LinkTask',
            fields=[
                ('lid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.IntegerField()),
                ('content', models.TextField()),
                ('attach', models.CharField(max_length=255)),
                ('member_count', models.IntegerField()),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField()),
                ('create_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='androidEdge.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('push_id', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tag_name', models.CharField(max_length=20)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('update_at', models.DateTimeField(auto_now_add=True)),
                ('create_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='androidEdge.Group')),
            ],
        ),
        migrations.CreateModel(
            name='TagMember',
            fields=[
                ('tmId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tag_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='androidEdge.Tag')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TimeLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField()),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='linktask',
            name='tag_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='androidEdge.Tag'),
        ),
        migrations.AddField(
            model_name='linkmember',
            name='link_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='androidEdge.LinkTask'),
        ),
        migrations.AddField(
            model_name='linkmember',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='linkcomplete',
            name='receive_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='androidEdge.LinkTask'),
        ),
        migrations.AddField(
            model_name='linkcomment',
            name='from_id',
            field=models.ForeignKey(on_delete=django.db.models.fields.CharField, related_name='from_member_id', to='androidEdge.LinkMember'),
        ),
        migrations.AddField(
            model_name='linkcomment',
            name='link_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='androidEdge.LinkTask'),
        ),
        migrations.AddField(
            model_name='linkcomment',
            name='to_id',
            field=models.ForeignKey(on_delete=django.db.models.fields.CharField, related_name='to_member_id', to='androidEdge.LinkMember'),
        ),
        migrations.AddField(
            model_name='event',
            name='group_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='androidEdge.Group'),
        ),
        migrations.AddField(
            model_name='event',
            name='link_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='androidEdge.LinkTask'),
        ),
        migrations.AddField(
            model_name='event',
            name='receive_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='receive_event_id', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='send_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='send_event_id', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='tag_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='androidEdge.Tag'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='timeline',
            unique_together={('start_time', 'end_time')},
        ),
    ]
